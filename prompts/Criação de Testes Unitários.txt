Crie testes unitários em Java (com Spring Boot e JUnit 5) para o use case chamado "[NOME_DO_USE_CASE]". Siga estas instruções com atenção:

1. **Use o padrão de nomenclatura para os métodos de teste:**  
   [useCaseName]_[comportamentoEsperado]_[contexto]  
   (Somente o nome do use case em inglês; restante em português)

   Exemplo: calcularDesconto_deveAplicarCorretamente_quandoProdutoElegivel

2. **Estruture cada teste usando o padrão Given-When-Then:**
   - **Given**: prepare os mocks e dados de entrada
   - **When**: execute o método a ser testado
   - **Then**: verifique os resultados usando assertions

3. **Teste todos os cenários possíveis relevantes para esse caso de uso**, incluindo:
   - Caminhos felizes (casos válidos)
   - Casos de exceção ou entrada inválida
   - Casos limites (valores mínimos/máximos, nulos, vazios etc.)

4. **Verifique todos os valores do retorno final**, assegurando que todos os atributos estejam como o esperado.

5. Utilize:
   - `@ExtendWith(MockitoExtension.class)` para ativar o Mockito
   - `Mockito` para mocks e verificações
   - `Assertions` do JUnit 5 (`assertEquals`, `assertTrue`, `assertThrows` etc.)

6. **Adicione comentários explicando em português o propósito de cada teste** com linguagem clara e direta.

7. **Não inclua testes de integração** ou que dependam de banco de dados real.

8. Os testes devem ser criados no diretório correto de testes.

9. Caso as exceptions lançadas sejam filhas da DomainException, e o map de Details dela ser diferente de nulo, validar os valores dos details.
segue alguns exemplos para algumas classes
Exemplo DatabaseValueNotFoundException:(
   DatabaseValueNotFoundException ex = assertThrows(DatabaseValueNotFoundException.class, () ->
                getExpenseRecurringCase.execute(user, expenseRecurringId)
        );
        assertEquals(expenseRecurringId.toString(), ex.getDetails().get("valor"));
)

Exemplo BusinessException:(
   BusinessException ex = assertThrows(BusinessException.class, () -> new Password(senhaInvalida));
        assertTrue(ex.getDetails().get("senha").equals(senhaInvalida));
)
OBS: as classes das exceções estão no caminho domain/shared/exceptions la você vai econtrar como validar os details, sempre utilize os mesmos valores de chave que encontrar la.

10. IMPORTANTE: Só crie testes para regras, validações e fluxos que estejam implementados diretamente na classe alvo do teste.
NUNCA crie testes para regras de entidades, objetos de valor, validadores ou qualquer lógica que pertença a outras classes, mesmo que sejam utilizadas pela classe alvo.
Sempre verifique se a responsabilidade da regra está realmente na classe que está sendo testada antes de criar o teste.

11. Não use "execute_" no nome do metodo, pois o execute é a função padrão dos casos de uso

12. Não utilize o setup com @BeforeEach de forma alguma!

13. Quando for fazer assertas para as exceções utilizar a propriedade details e não a propriedade mensagem.

14. Você deve  olhar toda a hierarquia da classe para ver os campos obrigatórios, e não leve em conta o cosntrutor vazio quando a classe tiver outro contrutor além do vazio.

15.
Ao criar entidades para os testes, prefira sempre instanciar diretamente as entidades utilizando fixtures ao invés de mockar.
As fixtures devem ficar em classes isoladas em seu respectivo diretorio dentro do caminho de testes, exemplo a entidade Category fica dentro da domain/category, logo a CategoryFixture deve ficar na domain/category na pasta de testes.
Crie métodos de fixture que preencham todos os campos obrigatórios dessas entidades, incluindo o campo de id (exemplo: Category category = CategoryFixture.umaCategoriaComId(idCategoria);).
Certifique-se de que todos os campos obrigatórios estejam devidamente preenchidos nas instâncias criadas pelas fixtures.  
Sempre que precisar definir o id de uma entidade, utilize o método setId ao invés de manipular o campo via reflexão (exemplo: expenseRecurring.setId(idExpenseRecurring);).
Inclua também o User nessas entidades quando aplicável.
Não crie fixtures de objetos de valor ou de fixtures que já existem.

---

### Exemplo de entrada para a IA:

```plaintext
Crie testes unitários para o use case "calcularDesconto".  
Este método aplica um desconto percentual em produtos com valor acima de R$ 100, e não aplica desconto para valores menores.  
Se o valor for negativo ou nulo, deve lançar uma exceção.

Siga o padrão:
- Nome do teste: calcularDesconto_[comportamentoEsperado]_[contexto]
- Estilo Given-When-Then
- Cobertura total de cenários: produto com valor acima de 100, abaixo de 100, valor nulo, valor negativo.
- Verifique todos os valores retornados.
- Comentários em português.
```
